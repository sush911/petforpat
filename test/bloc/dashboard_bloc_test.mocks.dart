// Mocks generated by Mockito 5.4.5 from annotations
// in petforpat/test/bloc/dashboard_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:petforpat/features/dashboard/domain/entities/pet_entity.dart'
    as _i5;
import 'package:petforpat/features/dashboard/domain/repositories/pet_repository.dart'
    as _i2;
import 'package:petforpat/features/dashboard/domain/usecases/get_pets_usecase.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePetRepository_0 extends _i1.SmartFake implements _i2.PetRepository {
  _FakePetRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetPetsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPetsUseCase extends _i1.Mock implements _i3.GetPetsUseCase {
  MockGetPetsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PetRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePetRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.PetRepository);

  @override
  _i4.Future<List<_i5.PetEntity>> call({
    String? search,
    String? category,
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #search: search,
            #category: category,
            #forceRefresh: forceRefresh,
          },
        ),
        returnValue: _i4.Future<List<_i5.PetEntity>>.value(<_i5.PetEntity>[]),
      ) as _i4.Future<List<_i5.PetEntity>>);
}
