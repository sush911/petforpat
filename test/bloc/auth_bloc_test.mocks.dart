// Mocks generated by Mockito 5.4.5 from annotations
// in petforpat/test/bloc/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:petforpat/features/auth/domain/entities/user_entity.dart'
    as _i2;
import 'package:petforpat/features/auth/domain/repositories/auth_repository.dart'
    as _i3;
import 'package:petforpat/features/auth/domain/usecases/update_profile_usecase.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserEntity_0 extends _i1.SmartFake implements _i2.UserEntity {
  _FakeUserEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthRepository_1 extends _i1.SmartFake
    implements _i3.AuthRepository {
  _FakeAuthRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> register(Map<String, dynamic>? data) => (super.noSuchMethod(
        Invocation.method(
          #register,
          [data],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String> login(
    String? username,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            username,
            password,
          ],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #login,
            [
              username,
              password,
            ],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<_i2.UserEntity> updateProfile(
    Map<String, dynamic>? data,
    _i6.File? image,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [
            data,
            image,
          ],
        ),
        returnValue: _i4.Future<_i2.UserEntity>.value(_FakeUserEntity_0(
          this,
          Invocation.method(
            #updateProfile,
            [
              data,
              image,
            ],
          ),
        )),
      ) as _i4.Future<_i2.UserEntity>);

  @override
  _i4.Future<_i2.UserEntity> getCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i4.Future<_i2.UserEntity>.value(_FakeUserEntity_0(
          this,
          Invocation.method(
            #getCurrentUser,
            [],
          ),
        )),
      ) as _i4.Future<_i2.UserEntity>);

  @override
  _i4.Future<void> clearToken() => (super.noSuchMethod(
        Invocation.method(
          #clearToken,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [UpdateProfileUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProfileUseCase extends _i1.Mock
    implements _i7.UpdateProfileUseCase {
  MockUpdateProfileUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.AuthRepository);

  @override
  _i4.Future<_i2.UserEntity> call(
    Map<String, dynamic>? data,
    _i6.File? image,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            data,
            image,
          ],
        ),
        returnValue: _i4.Future<_i2.UserEntity>.value(_FakeUserEntity_0(
          this,
          Invocation.method(
            #call,
            [
              data,
              image,
            ],
          ),
        )),
      ) as _i4.Future<_i2.UserEntity>);
}
